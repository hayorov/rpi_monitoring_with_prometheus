version: "3.4"
x-extra_hosts: &pi # Change this to IP of your RPi
  - "pi:192.168.1.141"
services:
  # Prometheus and grafana services use docker bind mounts to store config data on the host's filesystem. if you're familiar with
  # docker storage, you can use whatever you want. You can change it to use docker volumes if you want.
  # I have my external HDD mounted as /mnt/media. If you want to use a different directory for bind mount, you can do
  # that by modifying the bind mounts under volumes section of a service.
  #
  # All the services are multi-arch. So you wouldn't need to change the image if you are not running it on raspberry pi.
  #
  # Each services runs on a different port number. Services use docker bridge networking and have host ports mapped
  # to container ports. For these you can change the mapping between host ports and container ports.
  # Port mapping is in the format <host_port>:<container_port>
  prometheus:
    user: root
    image: prom/prometheus:latest
    restart: always
    container_name: prometheus
    extra_hosts: *pi
    ports:
      # Host port 9090 is mapped to container port 9090
      - "9090:9090"
    volumes:
      # Sample prometheus config is in the monitoring_config directory
      - ./monitoring_config/prometheus.yml:/etc/prometheus/prometheus.yml
      # Storing prometheus data in the hosts /mnt/media/appdata/prometheus directory
      - /media/tm/appdata/prometheus:/prometheus

  alertmanager:
    image: quay.io/prometheus/alertmanager:latest
    restart: always
    container_name: alertmanager
    extra_hosts: *pi
    ports:
      - "9093:9093"

  grafana:
    user: root
    image: grafana/grafana:master-ubuntu
    restart: always
    container_name: grafana
    extra_hosts: *pi
    depends_on:
      - prometheus
    ports:
      # Host port 3000 is mapped to container port 3000
      - "3000:3000"
    volumes:
      # Storing grafana data in the hosts /mnt/media/appdata/grafana directory
      - /media/tm/appdata/grafana:/var/lib/grafana

  # If you are not using raspberry pi then you can delete this section. This collects and exposes cpu temperature and
  # frequency. At the time of writing, these stats are not collected by node_exporter itself.
  rpi_cpu_stats:
    image: thundermagic/rpi_cpu_stats:latest
    restart: always
    container_name: rpi_cpu_stats
    ports:
      - "9669:9669"
    environment: # Add the PUID and PGID of the user you want to run the container as
      - PUID=1001
      - PGID=1001
    volumes:
      # Mounting the host's sys directory to containers /sys directory.
      - /sys:/sys
